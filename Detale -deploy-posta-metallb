

Introduccion.

MetalLB es una implementación de Load Balancer para entornos Kubernetes que permite exponer servicios mediante direcciones IP externas en entornos locales o en la nube. Permite a los servicios dentro de un clúster Kubernetes ser accesibles desde fuera del clúster.

En los entornos locales o en la nube que no proporcionan un servicio de Load Balancer integrado, MetalLB puede ser útil para asignar direcciones IP externas a los servicios que necesitan ser accesibles desde fuera del clúster. Utiliza protocolos estándar de enrutamiento, como ARP, NDP y BGP, para anunciar direcciones IP externas y enrutar el tráfico hacia los servicios.

Componenetes  de metallb.

1. Controlador de MetalLB:
El controlador ( controller) de MetalLB es el componente principal que gestiona la asignación de direcciones IP y el enrutamiento del tráfico para los servicios expuestos con el tipo de servicio LoadBalancer en Kubernetes. El controlador se ejecuta como un controlador personalizado (Custom Resource Definition - CRD) en el clúster Kubernetes.

2. Speakers

Son los componentes que interactúan con la infraestructura de red  para anunciar las direcciones IP asignadas por MetalLB y enrutar el tráfico hacia los servicios.

Hay dos tipos de Speakers:

Speakers de ARP: Para redes que utilizan el protocolo Address Resolution Protocol (ARP) para el enrutamiento, MetalLB puede utilizar Speakers de ARP para responder a solicitudes ARP y anunciar direcciones IP externas.

Speakers de BGP: Para redes que utilizan el protocolo Border Gateway Protocol (BGP) para el enrutamiento, MetalLB puede utilizar Speakers de BGP para anunciar las direcciones IP asignadas a través de sesiones BGP con los routers de la red.


Infrastructura.

Esta documentacion es referente al deploy de Metallb en un cluster k8s vanilla instalado en JORSAT. La infraestructura consta de :

- 1 nodo Master
- 2 nodos worker 

El hipervisor utilizado para correr las vms es VMware® Workstation 17 Pro 17.5.1 build-23298084. El flavor que asigne a las vms fue:

4 CPU
4 GB  de RAM
120 GB de disco

Instalacion.

Como primer paso vamos a editar el config map de el componente kube-proxy de kubernetes con el comando:

kubectl edit configmap -n kube-system kube-proxy

Seteamos el campo strictARP en true:

apiVersion: kubeproxy.config.k8s.io/v1alpha1
kind: KubeProxyConfiguration
mode: "ipvs"
ipvs:
  strictARP: true

Luego guardamos los cambios.

Instalamos Metallb aplicando el manifiesto:

kubectl apply -f https://raw.githubusercontent.com/metallb/metallb/v0.14.4/config/manifests/metallb-native.yaml

Como tercer paso vamos a crear los arcihvos yaml correspondietes al pool de IP's que asignara Metallb y el archivo de L2Advertisement para indicar que vamos a usar capa 2 con ARP como forma de anunciar las IP

IPPOOL

apiVersion: metallb.io/v1beta1
kind: IPAddressPool
metadata:
  name: first-pool
  namespace: metallb-system
spec:
  addresses:
  - 10.10.100.20-10.10.100.25 (Estas son ips de mi LAN y seran las ip externas)


L2Advertisement

apiVersion: metallb.io/v1beta1
kind: L2Advertisement
metadata:
  name: metallab 
  namespace: metallb-system
spec:
  ipAddressPools:
  - first-pool


Lugo de generar estos archivos los aplicamos con los comandos:

 kubectl craete -f  ippool-metalllb

 kubectl craete -f  L2Advertisement

 Chequeamos que los pods esten corriendo correctamente:

jlb@master-01:~$ kubectl get pods -n metallb-system -o wide
NAME                         READY   STATUS    RESTARTS   AGE   IP               NODE        NOMINATED NODE   READINESS GATES
controller-756c6b677-l6gmx   1/1     Running   0          41h   192.168.37.198   worker-02   <none>           <none>
speaker-8qzfp                1/1     Running   0          41h   10.10.100.7      worker-02   <none>           <none>
speaker-db4qn                1/1     Running   0          41h   10.10.100.5      master-01   <none>           <none>
speaker-k825x                1/1     Running   0          41h   10.10.100.15     worker-01   <none>           <none>

Configuramos nuestro kubernes dashboard para que Metallb le asigne la ip externa Para esto editamos el servicio referente kubernetes-dashboards con el comando:

kubectl edit svc kubernetes-dashboard -n kubernetes-dashboard

